package com.ebookstore.resource;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;


import com.ebookstore.domain.Book;
import com.ebookstore.service.BookService;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/book")
public class BookResource {
	
	@Autowired
	private BookService bookService;

	@GetMapping("/list")
	public ResponseEntity<List<Book>> listBooks() {
		List<Book> books =  bookService.findAll();
		
		return new ResponseEntity<List<Book>>(books, HttpStatus.OK);
	}
	
	@GetMapping("/view/{id}")
	public ResponseEntity<Book> viewBook(@PathVariable("id") int bookId) {
		Book book = bookService.findById(bookId);

		return new ResponseEntity<Book>(book, HttpStatus.OK);
	}
	
	@PutMapping("/edit")
	public ResponseEntity<Book> editBook(@RequestBody Book book) {
		bookService.save(book);
		return new ResponseEntity<Book>(book, HttpStatus.OK);
	}
	
	@PostMapping("/add")
	public ResponseEntity<Book> addBook(@RequestBody Book book) {
		bookService.save(book);
		return new ResponseEntity<Book>(book, HttpStatus.CREATED);
	}
	
	@DeleteMapping("/remove/{id}")
	public ResponseEntity<String> removeBook(@PathVariable("id") int bookId) {
		try {
			if(Files.exists(Paths.get("src/main/resources/static/image/books/"+bookId+".png"))) {
				Files.delete(Paths.get("src/main/resources/static/image/books/"+bookId+".png"));
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		bookService.deleteById(bookId);
		
		return new ResponseEntity<String>("Remove Success!", HttpStatus.OK);
	}
	
	@PostMapping("/uploadImage")
	public ResponseEntity<String> uploadImage(
			@RequestParam("id") int bookId, 
			HttpServletRequest request, 
			HttpServletResponse response) {
		try {
		
			MultipartHttpServletRequest multipartHttpServletRequest = (MultipartHttpServletRequest) request;
			Iterator<String> it = multipartHttpServletRequest.getFileNames();
			MultipartFile multipartFile = multipartHttpServletRequest.getFile(it.next());
			String fileName = bookId+".png";
			byte[] bytes = multipartFile.getBytes();
			BufferedOutputStream stream = new BufferedOutputStream(
					new FileOutputStream(new File("src/main/resources/static/image/books/"+fileName)));
			stream.write(bytes);
			stream.close();
			
			return new ResponseEntity<String>("Upload Success!", HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<String>("Upload failed", HttpStatus.BAD_REQUEST);
		}
	}
	
	@PostMapping("/searchBook")
	public ResponseEntity<List<Book>> searchBook(@RequestBody String keyword) {
		List<Book> books = bookService.blurrySearch(keyword);
		
		return new ResponseEntity<List<Book>>(books, HttpStatus.OK);
	}
	
	@PostMapping("/searchBookByCategory")
	public List<Book> searchBookByCategory(@RequestBody String category) {
		List<Book> books = bookService.searchByCategory(category);
		
		return books;
	}
	
}
