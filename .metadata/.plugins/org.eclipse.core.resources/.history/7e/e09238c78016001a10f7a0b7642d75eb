package com.ppm.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ppm.domain.Backlog;
import com.ppm.domain.ProjectTask;
import com.ppm.exception.ProjectNotFoundException;
import com.ppm.repository.BacklogRepository;
import com.ppm.repository.ProjectTaskRepository;

@Service
public class ProjectTaskServiceImpl implements ProjectTaskService {

	@Autowired
	private BacklogRepository backlogRepository;
	
	@Autowired
	private ProjectTaskRepository projectTaskRepository;

	@Override
	public void add(String projectIdentifier, ProjectTask projectTask) {
	
			Backlog backlog = backlogRepository.findByProjectIdentifier(projectIdentifier);
			if(backlog == null) {
				throw new ProjectNotFoundException(projectIdentifier+" not found.");
			}
			projectTask.setBacklog(backlog);
			
			int backlogSequence = backlog.getPtSequence();
			backlogSequence++;
			backlog.setPtSequence(backlogSequence);
			
			projectTask.setProjectSequence(projectIdentifier.toUpperCase()+"-"+backlogSequence);
			projectTask.setProjectIdentifier(projectIdentifier.toUpperCase());
			
			projectTaskRepository.save(projectTask);
		
		
	}

	@Override
	public List<ProjectTask> findByProjetIdentifier(String projectIdentifier) {
		List<ProjectTask> projectTasks = projectTaskRepository.findByProjectIdentifierOrderByPriority(projectIdentifier);
		if(projectTasks.size() == 0) {
			throw new ProjectNotFoundException(projectIdentifier+ " not found.");
		}
		return projectTasks;
	}

	@Override
	public ProjectTask findByProjectIdentifier(String projectIdentifier) {
		Backlog backlog = backlogRepository.findByProjectIdentifier(projectIdentifier);
		if(backlog == null) {
			throw new ProjectNotFoundException(projectIdentifier+" not found.");
		}
		
		ProjectTask projectTask = projectTaskRepository.findByProjectIdentifier(projectIdentifier);
		if(projectTask == null) {
			throw new ProjectNotFoundException(projectIdentifier+" not found.");
		}
		
//		if(!projectTask.getProjectIdentifier().equals(projectIdentifier)) {
//			throw new ProjectNotFoundException(projectSequence+" does not exist.");
//		}
		
		return projectTask;
	}

	@Override
	public void update(ProjectTask projectTask, String projectIdentifier, String projectSequence) {
		ProjectTask projectTask2 = findByProjectSequence(projectIdentifier, projectSequence);
		
		projectTaskRepository.save(projectTask);
	}

	@Override
	public void deleteByProjectSequence(String projectIdentifier, String projectSequence) {
		ProjectTask projectTask = findByProjectSequence(projectIdentifier, projectSequence);
		
		projectTaskRepository.delete(projectTask);
	}
	
	
}
