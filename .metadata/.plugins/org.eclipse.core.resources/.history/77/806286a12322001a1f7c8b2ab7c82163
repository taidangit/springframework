package com.ebookstore.resource;

import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ebookstore.domain.Book;
import com.ebookstore.domain.CartItem;
import com.ebookstore.domain.ShoppingCart;
import com.ebookstore.domain.User;
import com.ebookstore.service.BookService;
import com.ebookstore.service.CartItemService;
import com.ebookstore.service.ShoppingCartService;
import com.ebookstore.service.UserService;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/shoppingCart")
public class ShoppingCartResource {
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private CartItemService cartItemService;
	
	@Autowired
	private ShoppingCartService shoppingCartService;
	
	@Autowired
	private BookService bookService;
	
	@GetMapping("/getCartItems/{username}")
	public ResponseEntity<List<CartItem>> getCartItemList(@PathVariable String username) {
		User user = userService.findByUsername(username);
		
		ShoppingCart shoppingCart = user.getShoppingCart();
		List<CartItem> cartItems = cartItemService.findByShoppingCartshoppingCart);
		
		return new ResponseEntity<List<CartItem>>(cartItems, HttpStatus.OK);
		
	}
	
	@GetMapping("/cart/{username}")
	public ResponseEntity<ShoppingCart> shoppingCart(@PathVariable String username) {
		User user = userService.findByUsername(username);
		
		ShoppingCart shoppingCart = user.getShoppingCart();
		shoppingCartService.updateShoppingCart(shoppingCart);
		
		return new ResponseEntity<ShoppingCart>(shoppingCart, HttpStatus.OK);
		
	}
	
	@PostMapping("/addItem/{id}/{username}")
	public ResponseEntity<String> addItem(
			@PathVariable("id") int bookId, 
			@PathVariable String username, 
			@RequestBody HashMap<String, String> mapper) {
		User user = userService.findByUsername(username);
		
		Book book = bookService.findById(bookId);
		String qty = mapper.get("qty");
		
		if(Integer.parseInt(qty) > book.getInStockNumber()) {
			return new ResponseEntity<String>("notEnoughStock", HttpStatus.BAD_REQUEST);
		}
		
		cartItemService.addBookToCartItem(book, user, Integer.parseInt(qty));
		
		return new ResponseEntity<String>("Book Added Successfully!", HttpStatus.OK);
	}
	
	@PostMapping("/updateCartItem/{id}")
	public ResponseEntity<String> updateCartItem(
			@PathVariable("id") int cartItemId, 
			@RequestBody HashMap<String, String> mapper) {
		String qty = mapper.get("qty");
		
		CartItem cartItem = cartItemService.findById(cartItemId);
		cartItem.setQty(Integer.parseInt(qty));
		cartItemService.updateCartItem(cartItem);
		
		return new ResponseEntity<String>("Cart Item Updated Successfully!", HttpStatus.OK);
		
	}
	
	@DeleteMapping("/removeItem/{id}")
	public ResponseEntity<String> removeItem(@PathVariable("id") int cartItemId, Model model) {
		cartItemService.removeCartItem(cartItemId);
		
		return new ResponseEntity<String>("Cart Item Removed Successfully!", HttpStatus.OK);
	}
	
	@GetMapping("/removeAllItem/{username}")
	public ResponseEntity<String> removeAll(@PathVariable String username) {
		User user = userService.findByUsername(username);
		ShoppingCart shoppingCart = user.getShoppingCart();
		
		cartItemService.removeAllCartItems(shoppingCart);
		
		return new ResponseEntity<String>("Cart Item Removed All Successfully!", HttpStatus.OK);
	}

}
